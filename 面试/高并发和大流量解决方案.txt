【PHP如何解决网站大流量高并发的问题】


 /////////////// 高并发架构相关概念 ///////////////


 >> 高并发：某个时间点，有多少个访问同时到来，一个系统日PV在千万以上，有可能是高并发系统

 >> QPS:每秒请求或者查询的数量，每秒响应请求数（HTTP请求），QPS不等于并发连接数

 >> 吞吐量：单位时间内处理的请求数量（通常由QPS与并发数决定）

 >> 响应时间：从请求发出到响应花费的时间。

 >> PV：(page view)，页面浏览量或者点击量，一个访客在24小时内访问的页面数量，同一个人浏览网站，同一页面，只记作一次PV

 >> UV:独立访客

 >> 日网站带宽 = PV / 统计时间（秒） * 平均页面大小（KB）* 8

 >> 峰值每秒请求数(QPS) = (总PV*80%) / (6小时秒数 * 20%)

 >> 压力测试：测试能承受的最大并发，测试最大承受的QPS值

 >> 常用性能测试工具：ab wrk http_load web bench siege apache jmeter


 /////////////// ab (apache benchmark) ///////////////


 >> 测试目标基于URL，因此可以用来测试nginx等其他服务器压力

 >> ab的使用：ab -c 100 -n 5000 待测试网站

 >> 注意事项：测试机器和被测试机器分开，不要对线上服务做压力测试


 /////////////// QPS分析 ///////////////


 >> QPS达到50：小型网站，一般服务器就可以应付

 >> QPS达到100：数据库缓存层，数据库负载均衡

 >> QPS达到800：CND加速，负载均衡

 >> QPS达到1000：动态生静态

 >> QPS达到2000：做业务分离，分布式存储



【解决大流量高并发方案】


 /////////////// 流量优化 ///////////////


 >> 防盗链


 /////////////// 前端优化 ///////////////


 >> 减少HTTP请求，添加异步请求

 >> 启用浏览器缓存和文件压缩

 >> CDN加速

 >> 建立独立图片服务器


 /////////////// 服务端优化 ///////////////

 >> 页面静态化

 >> 并发处理

 /////////////// 数据库优化 ///////////////

 >> 数据库缓存

 >> 分库分表、分区操作

 >> 读写分离

 >> 负载均衡

 /////////////// Web服务器优化 ///////////////

 >> 负载均衡


【防盗链的实现方法】


 /////////////// Referer ///////////////

 >> valid_referers none | blocked | server_names | string

 >> none: Referer来源头部为空的情况

 >> blocked：referer来源头部不为空，但是里面的值被代理或者防火墙删除了，这些值都不以http://或者https://开头

 /////////////// nginx彻底实现防盗链 ///////////////

location ~* \.(gif|jpg|png|jpeg)$ {
    expires     30d;
    valid_referers *.hugao8.com www.hugao8.com m.hugao8.com *.baidu.com *.google.com;
    if ($invalid_referer) {
    rewrite ^/ http://ww4.sinaimg.cn/bmiddle/051bbed1gw1egjc4xl7srj20cm08aaa6.jpg;
    #return 404;
    }
    }
 

【减少HTTP请求】


 /////////////// 性能黄金法则 ///////////////

只有10%-20%的最终用户响应时间花在接收请求的HTML文档上，剩下的80%-90%的时间花在HTML文档所引用的图片、script、css、flash等进行的HTTP请求上

 /////////////// 如何改善 ///////////////

 >> CSS Sprites (css 精灵)

 >> 使用外部的js和css文件引用的方式

 >> 独立的js文件比多个js文件组成的页面载入要快38%

 >> 图片使用Base64编码减少页面请求数


