【缓存更新策略】

 >> LRU/LFU/FIFO算法剔除：例如maxmemory-policy； 一致性：最差 维护成本：低

 >> 超时剔除：例如expire； 一致性：较差 维护成本：低

 >> 主动更新：开发控制生命周期； 一致性：强 维护成本：高

 //////////// 策略选择建议  /////////////

 >> 低一致性:最大内存和淘汰策略

 >> 高一致性:超时剔除和主动更新结合，最大内存和淘汰策略兜底


【缓存粒度控制】

 >> 通用性：全量属性更好

 >> 占用空间：部分属性更好

 >> 代码维护：表面上全量属性更好


【缓存穿透问题-大量请求不命中】

 //////////// 产生原因  /////////////

 >> 业务代码自身问题

 >> 恶意攻击、爬虫

 >> 相关指标：总调用数、缓存层命中数、存储层命中数

 //////////// 解决方法  /////////////

 >> 缓存空对象

 >> 布隆过滤器拦截


 >> 作用：可以用于检索一个元素是否在一个集合中，其效率远超一般算法，有一定误判率


【热点key重建优化】

 //////////// 三个目标  /////////////

 >> 减少重缓存的次数

 >> 数据尽可能一致

 >> 减少潜在危险

 //////////// 两个解决  /////////////

 >> 互斥锁

 >> 永不过期