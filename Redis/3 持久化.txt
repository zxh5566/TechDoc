【RDB持久化】

 >> RDB: 指定的时间间隔内保存数据快照


 //////////// RDB配置 //////////// 

 >> save 900 1; save 300 10; save 60 10000

 >> dbfilename dump.rdb

 >> dir /var/lib/redis



 //////////// RDB优点 ////////////

 >> 适合用于进行备份

 >> fork出子进程进行备份，主进程没有任何IO操作

 >> 恢复大数据集时速度快



 //////////// RDB缺点 ////////////

 >> 特定条件下进行一次持久化，易丢失数据

 >> 庞大数据，保存出现性能问题


 //////////// RDB最佳策略 ////////////

 >> 关闭 save 策略

 >> 集中管理 定时备份

 >> 主从，从开



【AOF持久化】

 
 >> AOF: 先把命令追加到操作日志的尾部，保存所有历史操作


 //////////// AOF配置 //////////// 

 >> appendonly yes

 >> appendfilename "appendonly.aof"

 >> dir /var/lib/redis

 >> appendfsync everysec / always / no

 >> no-appendfsync-on-rewrite yes

 >> auto-aof-rewrite-percentage 100

 >> auto-aof-rewrite-min-size 64mb


 //////////// AOF重写 //////////// 

 >> bgrewriteaof

 >> AOF重写配置

    auto-aof-rewrite-min-size : AOF文件重写需要的尺寸

    auto-aof-rewrite-percentage : AOF文件增长率

 >> 自动触发时机同时满足
    
     aof_current_size > auto-aof-rewrite-min-size

     (aof_current_size - aof_base_size)/aof_base_size > auto-aof-rewrite-percentage

 
 //////////// AOF优点 ////////////

 >> 数据完整，故障恢复丢失数据少

 >> 可对历史操作进行处理


 //////////// AOF缺点 ////////////

 >> 文件体积大

 >> 故障恢复速度慢


 //////////// AOF最佳策略 ////////////

 >> 开

 >> AOF重写集中管理

 >> appendfsync everysec


【RDB和AOF的抉择】


 //////////// RDB和AOF比较 ////////////

 >> 启动优先级   RDB 低   AOF 高

 >> 体积         小       大

 >> 恢复速度     快       慢

 >> 数据安全性   丢数据   根据策略决定

 >> 轻重         重       轻


